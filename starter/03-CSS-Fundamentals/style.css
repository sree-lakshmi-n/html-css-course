h1,
h2,
h3,
h4,
p,
li {
  font-family: sans-serif;
  color: #444;
}
h1,
h2,
h3 {
  color: #1098ad;
}
h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}
h2 {
  font-size: 40px;
}
/* It's okay if font-size of h2 is bigger than h1.
h1, h2 tags are all about semantics, rather than styling */
h3 {
  font-size: 30px;
}
h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}
p {
  font-size: 22px;
  line-height: 1.5; /* we use a value without unit. Here, it indicates
  the line-height is 1.5 times the font-size*/
}
li {
  font-size: 20px;
}
/* footer p {
  /* Descendent selector*/
/* font-size: 16px;
} */
/*
Suppose we only want the paragraphs that are inside of headers,
which are inside of articles, to be italic.

 article header p{
     font-style: italic;
 }    
This works and is called nested descendent selector

But we are now even more encoding the HTML structure into our CSS selectors, and that can make our code hard to maintain in the future if we ever change our HTML.
And so that's not a good idea.
So, we use class and id selectors.
*/

#author {
  font-style: italic;
  font-size: 18px;
}
#copyright {
  font-size: 16px;
}
.related-author {
  font-size: 18px;
  font-weight: bold;
}
.related {
  list-style-type: none;
}
/*
In real life, we always use classes, rather than ids. 
By using classes, we're prepared for future. So that even if we add more of a kind, we needn't change its earlier declaration of id to class.
This very act of modifying can give rise to a lot of bugs in larger projects.
*/

/*
Working with colours
*/
.main-header {
  background-color: #f7f7f7;
}
aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
}

/*
Pseudo-classes
*/
/*
first child pseudo class here will select all the li elements that are
the first child elements of its parent elements
*/
li:first-child {
  font-weight: bold;
}
/*
last child pseudo class here will select all the li elements that are
the last child elements of its parent elements
*/
li:last-child {
  font-style: italic;
}
li:nth-child(2) {
  /* color: red; */
}
/*
nth child pseudo class here will select specific elements of its parent elements 
*/
li:nth-child(odd) {
  /* even is also a keyword */
  /* color: red; */
}

article p:first-child {
  color: red;
}
/*
Nothing happens. No paragraph turned red.
The misconception is that this selector here should have selected the first p element inside of the article.

The paragraph, 'Posted by Laura Jones on Monday, June 21st 2027' is in fact the first paragraph inside of the article however, not the first child of the article.
The first child of article is actually header. So this would only work if a paragraph, would actually be to first element of the article.
*/
/* article p:last-child {
  color: red;
} */
/*
  This works. Since the p element was the last child of the article.
  */
/*
Used pseudo-classes mostly when all the child elements are the same.
*/

/* Styling links */
/* a {
  color: #1098ad;
} */
/*
We shouldn't simply select the anchor element and style it.
Instead we should style a pseudo class of the anchor
because that will then allow us to target different states.
*/
/* targets anchor elements with href attribute */
a:link {
  color: #1098ad;
  text-decoration: none;
}
/* <a> can exist without href attribute. This allows us to target only those anchor elements with links */

/* Visited links */
a:visited {
  /* color: #aaa; */
  color: #1098ad;
}

/* hovered links */
a:hover {
  font-weight: bold;
  color: orangered;
  text-decoration: underline solid orangered;
  /* (OR) text-decoration: underline orangered; */
}

/* active links */
a:active {
  background-color: black;
  font-style: italic;
}
